#!/bin/bash

tmpfs=${TMPFS:-/tmp}

default_mode=global
current_mode=$default_mode
mode_file=$tmpfs/qeman_mode
#mode_file=./.qeman-mode
local_mode_file=./.qeman_mode

# These are the possible filenames and paths of the config file
config_fn=qeman.setups
local_config_fn=./$config_fn
xdg_config_fn=$XDG_CONFIG_HOME/qeman/$config_fn
home_config_fn=$HOME/.config/qeman/$config_fn
custom_config_fn=$QEMAN_CONFIG_FILE

# This is our config file var
# no default value
qeman_config_file=""

# Source the config parser
source "${0%/*}"/bash-ini-parser


### Function definitions

print_setups() {
	if [[ -n $1 && $1 == "-l" ]]; then
		cat $qeman_file | sed 's/^/  /g' | sed 's/  \[/\[/g'
	else
		cat $qeman_file | grep -vP "^[^\[].*[^\]]$" | tr -d "[]"
	fi
}

print_help() {
	cat << EOI
qeman: A simple CLI manager for qemu setups

Usages:
- qeman run [-bg] NAME
- qeman mode
- qeman mode local [save]
- qeman mode global [save]
- qeman setup new NAME
- qeman setup cp SRC DEST
- qeman setup mv SRC DEST
- qeman setup rm NAME
- qeman setup ls [-l]
EOI
}

setup_new() {
	if [[ -z $1 ]]; then
		echo "No name specified"
		exit 1
	fi

	cfg_writer > $qeman_file
	echo "Adding new setup $1"
	echo "[$1]" >> $qeman_file
	echo "localtime=enable" >> $qeman_file
	parse_config
}

setup_cp() {
	if [[ -z $1 || -z $2 ]]; then
		echo "Not enough arguments"
		exit 1
	fi

	cfg_writer > $qeman_file
	output=$(sed -n -e "/$1\]/,/^\[/{ /$1\]/d; /^\[/d; p; }" qeman.setups)
	if [[ -z $output ]]; then
		echo "Invalid source"
		exit 1
	fi
	echo "Copying $1 to $2"
	echo "[$2]" >> $qeman_file
	echo "$output" >> $qeman_file
	parse_config
}

setup_mv() {
	if [[ -z $1 || -z $2 ]]; then
		echo "Not enough arguments"
		exit 1
	fi

	cfg_writer > $qeman_file
	echo "Moving $1 to $2"
	sed -i "s/$1/$2/g" $qeman_file
	parse_config
}

setup_rm() {
	if ! grep -q "\[$1\]" $qeman_file; then
		echo "Setup not found"
		exit 1
	fi	

	cfg_writer > $qeman_file
	echo "Removing $1"
	sed "/\[$1\]/,"'/\[/{//!d}' $qeman_file | sed "/\[$1\]/d" > $tmpfs/$config_fn
	cp $tmpfs/$config_fn $qeman_file
	rm $tmpfs/$config_fn
	parse_config
}

run_machine() {
	if [[ -z $1 ]]; then
		echo "No setup specified"
		exit 1
	fi

	cfg_unset
	if ! cfg_section_$1 2> /dev/null; then
		echo "Unrecognized setup '$1'"
		echo "List of available setups":
		eval "$0 ls"
		exit 1
	fi

	run_cmd=""

	# Add prehook
	if [[ -n $prehook ]]; then
		run_cmd="$prehook; $run_cmd;"
	fi

	# Add cmd
	# if cmd doesn't exist, then build it from the config
	if [[ -n $cmd ]]; then
		run_cmd="$run_cmd $cmd"
	else
		# Add arch
		# So far run_cmd only has prehook so we need semicolon

		# kvm needs sudo so add that first if we need it
		if [[ -n $kvm && $kvm == enable ]]; then
			run_cmd="$run_cmd sudo"; fi

		run_cmd="$run_cmd qemu-system-$arch"

		# Add all the options that we know how to deal with
		if [[ -n $hda ]]; then
			run_cmd="$run_cmd -hda $hda"; fi
		if [[ -n $hdb ]]; then
			run_cmd="$run_cmd -hdb $hdb"; fi
		if [[ -n $hdc ]]; then
			run_cmd="$run_cmd -hdc $hdc"; fi
		if [[ -n $hdd ]]; then
			run_cmd="$run_cmd -hdd $hdd"; fi
		if [[ -n $hde ]]; then
			run_cmd="$run_cmd -hde $hde"; fi
		if [[ -n $cd ]]; then
			run_cmd="$run_cmd -cdrom $cd"; fi
		if [[ -n $portfwd ]]; then
			run_cmd="$run_cmd -netdev user,id=user.0,hostfwd=$portfwd -device e1000,netdev=user.0"; fi

		if [[ -n $mem ]]; then
			run_cmd="$run_cmd -m $mem"; fi

		if [[ -n $localtime && $localtime == enable ]]; then
			run_cmd="$run_cmd -localtime"; fi

		if [[ -n $kvm && $kvm == enable ]]; then
			run_cmd="$run_cmd -enable-kvm"; fi

		if [[ -n $boot_from_cd && $boot_from_cd == enable ]]; then
			run_cmd="$run_cmd -boot d"; fi
	fi

	# Add other options
	if [[ -n $opts ]]; then
		run_cmd="$run_cmd $opts"; fi

	# Add posthook
	if [[ -n $posthook ]]; then
		run_cmd="$run_cmd; $posthook"; fi

	# Run!
	if [[ $2 == "-bg" ]]; then
		eval $run_cmd & exit
	else
		eval $run_cmd
		exit
	fi
}

# End function definitions


# Checking if the user is asking for help should be top priority
if [[ -z $1 || $1 == "-h" || $1 == "--help" ]]; then
	print_help
	exit
fi

# Handling the mode commands
if [[ $1 == mode ]]; then
	# set mode to local
	if [[ $2 == local ]]; then
		echo "qeman mode set to local"
		if [[ $3 == save ]]; then
			echo "saving qeman mode to $local_mode_file"
			echo local > $local_mode_file
		else
			echo local > $mode_file
		fi

	# set mode to global
	elif [[ $2 == global ]]; then
		echo "qeman mode set to global"
		if [[ $3 == save ]]; then
			echo "saving qeman mode to $local_mode_file"
			echo global > $local_mode_file
		else
			echo global > $mode_file
		fi

	# get mode
	else
		if [[ -s $local_mode_file ]]; then
			cat $local_mode_file
		elif [[ -s $mode_file ]]; then
			cat $mode_file
		else
			echo $default_mode > $mode_file
			cat $mode_file
		fi
	fi
	exit 0
fi

# Setting the mode on load
# Default is already set, so set only if the mode file exists
if [[ -s $local_mode_file ]]; then
	current_mode=$(cat $local_mode_file)
elif [ -s $mode_file ]; then
	current_mode=$(cat $mode_file)
fi

# Error checking the mode file
if [ $current_mode != local -a $current_mode != global ]; then
	echo "Invalid mode"
	exit 1
fi

# Choose config file
if [[ -n $QEMAN_CONFIG_FILE ]]; then
	qeman_file="$QEMAN_CONFIG_FILE"
elif [[ $current_mode == local ]]; then
	qeman_file="$local_config_fn"
elif [[ $current_mode == global && -s $xdg_config_fn ]]; then
	qeman_file="$xdg_config_fn"
elif [[ $current_mode == global && -s $home_config_fn ]]; then
	qeman_file="$home_config_fn"
else
	echo "No qeman file found"
	echo "Check your global/local mode setting"
	exit 1
fi

# Parse the config
parse_config() {
	#echo "Parsing config!"
	if ! cfg_parser "$qeman_file" ; then
		echo "error 1"
		exit 1
	fi
}
parse_config


# Command: run
if [[ $1 == run ]]; then
	if [[ $2 == "-bg" ]]; then
		run_machine $3 $2
	else
		run_machine $2
	fi
fi
# End command: run


# Command: setup
if [[ $1 == setup ]]; then
	if [[ $2 == new ]]; then
		setup_new $3
	elif [[ $2 == cp ]]; then
		setup_cp $3 $4
	elif [[ $2 == mv ]]; then
		setup_mv $3 $4
	elif [[ $2 == rm ]]; then
		setup_rm $3
	elif [[ $2 == ls ]]; then
		print_setups $3
	else
		echo "Unrecognized command: $2"
	fi
	exit
fi
# End command: setup


# Aliases for setup
if [[ $1 == new ]]; then
	setup_new $2
elif [[ $1 == cp ]]; then
	setup_cp $2 $3
elif [[ $1 == mv ]]; then
	setup_mv $2 $3
elif [[ $1 == rm ]]; then
	setup_rm $2
elif [[ $1 == ls ]]; then
	print_setups $2
else
	echo "Unrecognized command: $1"
	if [[ $1 == add ]]; then
		echo "Did you mean 'new'?"
	fi
fi
exit
# End aliases for setup
